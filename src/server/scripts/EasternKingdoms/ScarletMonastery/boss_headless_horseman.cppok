/*
 * Copyright (C) 2008-2012 TrinityCore <http://www.trinitycore.org/>
 * Copyright (C) 2006-2009 ScriptDev2 <https://scriptdev2.svn.sourceforge.net/>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* ScriptData
SDName: Boss_Headless_Horseman
SD%Complete:
SDComment:
SDCategory: Scarlet Monastery
EndScriptData */

#include "ScriptPCH.h"
#include "SpellMgr.h"
#include "scarlet_monastery.h"
#include "LFGMgr.h"

//this texts are already used by 3975 and 3976
enum Says
{
    SAY_ENTRANCE                = -1189001,
    SAY_REJOINED                = -1189002,
    SAY_LOST_HEAD               = -1189003,
    SAY_CONFLAGRATION           = -1189004,
    SAY_SPROUTING_PUMPKINS      = -1189005,
    SAY_PLAYER_DEATH            = -1189006,
    SAY_DEATH                   = -1189007
};

uint32 RandomLaugh[] = {11965, 11975, 11976};

enum Entry
{
    HH_MOUNTED                  = 23682,
    HH_DISMOUNTED               = 23800,  // unhorsed?? wtf type of engrish was that?
    HEAD                        = 23775,
    PULSING_PUMPKIN             = 23694,
    PUMPKIN_FIEND               = 23545,
    WISP_INVIS                  = 24034
};

enum Spells
{
    SPELL_CLEAVE                = 42587,
    SPELL_CONFLAGRATION         = 42380,       //Phase 2, can't find real spell(Dim Fire?)
 // SPELL_CONFL_SPEED           = 22587,       //8% increase speed, value 22587 from SPELL_CONFLAGRATION mains that spell?
    SPELL_SUMMON_PUMPKIN        = 42394,

    SPELL_WHIRLWIND             = 43116,
    SPELL_IMMUNE                = 42556,
    SPELL_BODY_REGEN            = 42403,
    SPELL_CONFUSE               = 43105,

    SPELL_FLYING_HEAD           = 42399,       //visual flying head
    SPELL_HEAD                  = 42413,       //visual buff, "head"
    SPELL_HEAD_IS_DEAD          = 42428,       //at killing head, Phase 3

    SPELL_PUMPKIN_AURA          = 42280,
    SPELL_PUMPKIN_AURA_GREEN    = 42294,
    SPELL_SQUASH_SOUL           = 42514,
    SPELL_SPROUTING             = 42281,
    SPELL_SPROUT_BODY           = 42285,

    //Effects
    SPELL_RHYME_BIG             = 42909,
 // SPELL_RHYME_SMALL           = 42910,
    SPELL_HEAD_SPEAKS           = 43129,
    SPELL_HEAD_LANDS            = 42400,
    SPELL_BODY_FLAME            = 42074,
    SPELL_HEAD_FLAME            = 42971,
 // SPELL_ENRAGE_VISUAL         = 42438,       // he uses this spell?
    SPELL_WISP_BLUE             = 42821,
    SPELL_WISP_FLIGHT_PORT      = 42818,
 // SPELL_WISP_INVIS            = 42823,
    SPELL_SMOKE                 = 42355,
    SPELL_DEATH                 = 42566       //not correct spell
};

enum Events
{
	EVENT_PREFIGHT_TALK = 1,
	EVENT_START_FLIGHT,
	EVENT_HORSEMAN_CLEAVE,
	EVENT_HORSEMAN_LAUGH,
	EVENT_HORSEMAN_CONFLAGRATE,
	EVENT_HORSEMAN_PUMPKINS,
	EVENT_HORSEMAN_TEST_HEAD,
	EVENT_HORSEMAN_WHIRLWIND,
};

struct Locations
{
    float x, y, z;
};

static Position FlightPoint[21]=
{
    {1765.00f, 1347.00f, 19.00f, 0.0f},
    {1784.00f, 1346.80f, 25.40f, 0.0f},
    {1803.30f, 1347.60f, 33.00f, 0.0f},
    {1824.00f, 1350.00f, 42.60f, 0.0f},
    {1838.80f, 1353.20f, 49.80f, 0.0f},
    {1852.00f, 1357.60f, 55.70f, 0.0f},
    {1861.30f, 1364.00f, 59.40f, 0.0f},
    {1866.30f, 1374.80f, 61.70f, 0.0f},
    {1864.00f, 1387.30f, 63.20f, 0.0f},
    {1854.80f, 1399.40f, 64.10f, 0.0f},
    {1844.00f, 1406.90f, 64.10f, 0.0f},
    {1824.30f, 1411.40f, 63.30f, 0.0f},
    {1801.00f, 1412.30f, 60.40f, 0.0f},
    {1782.00f, 1410.10f, 55.50f, 0.0f},
    {1770.50f, 1405.20f, 50.30f, 0.0f},
    {1765.20f, 1400.70f, 46.60f, 0.0f},
    {1761.40f, 1393.40f, 41.70f, 0.0f},
    {1759.10f, 1386.70f, 36.60f, 0.0f},
    {1757.80f, 1378.20f, 29.00f, 0.0f},
    {1758.00f, 1367.00f, 19.51f, 0.0f}
};

static Locations Spawn[]=
{
	{1746.31f, 1348.62f, 17.50f},
    {1776.27f, 1348.74f, 19.20f},       //spawn point for pumpkin shrine mob
    {1765.28f, 1347.46f, 17.55f}     //spawn point for smoke
};

static const char* Text[]=
{
    "Horseman rise...",
    "Your time is nigh...",
    "You felt death once...",
    "Now, know demise!"
};

#define EMOTE_LAUGHS    "Headless Horseman laughs"  // needs assigned to db.

class mob_wisp_invis : public CreatureScript
{
public:
    mob_wisp_invis() : CreatureScript("mob_wisp_invis") { }

    CreatureAI* GetAI(Creature* creature) const
    {
        return new mob_wisp_invisAI (creature);
    }

    struct mob_wisp_invisAI : public ScriptedAI
    {
        mob_wisp_invisAI(Creature* creature) : ScriptedAI(creature)
        {
            Creaturetype = delay = spell = spell2 = 0;
        }

        uint32 Creaturetype;
        uint32 delay;
        uint32 spell;
        uint32 spell2;
        void Reset() {}
        void EnterCombat(Unit* /*who*/) {}
        void SetType(uint32 _type)
        {
            switch (Creaturetype = _type)
            {
                case 1:
                    spell = SPELL_PUMPKIN_AURA_GREEN;
                    break;
                case 2:
                    delay = 15000;
                    spell = SPELL_BODY_FLAME;
                    break;
                case 3:
                    delay = 15000;
                    spell = SPELL_SMOKE;
                    break;
                case 4:
                    delay = 7000;
					spell = SPELL_BODY_FLAME;
                    spell2 = SPELL_WISP_BLUE;
                    break;
            }
            if (spell)
                DoCast(me, spell);
        }

        void SpellHit(Unit* /*caster*/, const SpellInfo* spell)
        {
            if (spell->Id == SPELL_WISP_FLIGHT_PORT && Creaturetype == 4)
				me->SummonCreature(23904, *me);
        }

        void UpdateAI(const uint32 diff)
        {
            if (delay)
            {
                if (delay <= diff)
                {
                    me->RemoveAurasDueToSpell(SPELL_SMOKE);
                    if (spell2)
                        DoCast(me, spell2);
                    delay = 0;
                } else delay -= diff;
            }
        }
    };
};

class mob_head : public CreatureScript
{
public:
    mob_head() : CreatureScript("mob_head") { }

    CreatureAI* GetAI(Creature* creature) const
    {
        return new mob_headAI (creature);
    }

    struct mob_headAI : public PassiveAI
    {
		mob_headAI(Creature* creature) : PassiveAI(creature) {}

        uint64 bodyGUID;

        uint32 Phase;
        uint32 laugh;

        void Reset()
        {
			me->AddAura(SPELL_HEAD, me);
            Phase = 0;
            bodyGUID = 0;
            laugh = urand(15000, 30000);
        }

        void EnterCombat(Unit* /*who*/) {}
        void SaySound(int32 textEntry, Unit* target = 0)
        {
            DoScriptText(textEntry, me, target);
            me->CastSpell(me, SPELL_HEAD_SPEAKS, false);
            laugh += 3000;
        }

        void DamageTaken(Unit* /*done_by*/, uint32 &damage)
        {
            switch (Phase)
            {
                case 1:
					if (me->HealthBelowPctDamaged(67, damage))
                        Disappear();
                    break;
                case 2:
                    if (me->HealthBelowPctDamaged(34, damage))
                        Disappear();
                    break;
                case 3:
                    if (damage >= me->GetHealth())
					{
						Phase++;
                        Disappear();
					}
                    break;
            }
        }

		void SetData(uint32 phase, uint32)
		{
			Phase = phase;
		}

        void SpellHit(Unit* caster, const SpellInfo* spell)
        {
            if (spell->Id == SPELL_FLYING_HEAD)
            {
				me->SetVisible(true);

                bodyGUID = caster->GetGUID();
                me->RemoveAllAuras();
                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
                DoCast(me, SPELL_HEAD_LANDS, true);
				me->AddAura(SPELL_HEAD, me);
                SaySound(SAY_LOST_HEAD);
				me->GetMotionMaster()->MoveRandom(15.0f);
            }
        }

		void Disappear()
		{
			if (bodyGUID)
			{
				Creature* body = Unit::GetCreature((*me), bodyGUID);
				if (body && body->isAlive())
				{
					me->RemoveAllAuras();
					body->GetAI()->SetData(Phase, 0);
					body->RemoveAurasDueToSpell(SPELL_IMMUNE);//hack, SpellHit doesn't calls if body has immune aura
					DoCast(body, SPELL_FLYING_HEAD);
					me->SetVisible(false);
					me->DespawnOrUnsummon(3000);
					laugh = 0;
				}
			}
		}

        void UpdateAI(const uint32 diff)
        {
			if (laugh)
			{
				if (laugh <= diff)
				{
					laugh = urand(15000, 30000);
					me->PlayDirectSound(RandomLaugh[urand(0, 2)]);
					me->CastSpell(me, SPELL_HEAD_SPEAKS, false);
					me->MonsterTextEmote(EMOTE_LAUGHS, 0);
				}
				else laugh -= diff;
			}
        }
    };
};

class boss_headless_horseman : public CreatureScript
{
public:
    boss_headless_horseman() : CreatureScript("boss_headless_horseman") { }

    CreatureAI* GetAI(Creature* creature) const
    {
        return new boss_headless_horsemanAI (creature);
    }

    struct boss_headless_horsemanAI : public ScriptedAI
    {
        boss_headless_horsemanAI(Creature* creature) : ScriptedAI(creature)
        {
            instance = creature->GetInstanceScript();
        }

        InstanceScript* instance;
		EventMap events;

        uint64 headGUID;

        uint32 count;
		uint32 Phase;

        bool withhead;

        void Reset()
        {
			events.Reset();
			events.ScheduleEvent(EVENT_HORSEMAN_CLEAVE, 2000);
            count = 0;
			Phase = 1;
			withhead = true;

            DoCast(me, SPELL_HEAD);
            if (headGUID)
            {
                if (Creature* Head = Unit::GetCreature((*me), headGUID))
                    Head->DisappearAndDie();

                headGUID = 0;
            }

            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
        }

        void FlyMode()
        {
            me->SetVisible(false);
            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
			events.Reset();
			events.ScheduleEvent(EVENT_PREFIGHT_TALK, 1000);
            count = 0;
			Phase = 0;
        }

        void MovementInform(uint32 type, uint32 i)
        {
			if (i != 1)
				return;

            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
			me->SetHomePosition(*me);
            SaySound(SAY_ENTRANCE);
			DoZoneInCombat();
			events.Reset();
			Phase = 1;
			events.ScheduleEvent(EVENT_HORSEMAN_CLEAVE, urand(2000, 6000));
			events.ScheduleEvent(EVENT_HORSEMAN_LAUGH, urand(11000, 22000));
			withhead = true;
        }

        void EnterCombat(Unit* /*who*/)
        {
            if (instance)
                instance->SetData(DATA_HORSEMAN_EVENT, IN_PROGRESS);
            DoZoneInCombat();
        }

        void MoveInLineOfSight(Unit* who)
        {
			if (Phase)
                ScriptedAI::MoveInLineOfSight(who);
        }

        void KilledUnit(Unit* player)
        {
            if (player->GetTypeId() == TYPEID_PLAYER)
            {
                if (withhead)
                    SaySound(SAY_PLAYER_DEATH);
                else if (Creature* Head = Unit::GetCreature((*me), headGUID))
                    CAST_AI(mob_head::mob_headAI, Head->AI())->SaySound(SAY_PLAYER_DEATH);
            }
        }

        void SaySound(int32 textEntry, Unit* target = 0)
        {
            DoScriptText(textEntry, me, target);
			events.RescheduleEvent(EVENT_HORSEMAN_LAUGH, 4000);
        }

        Player* SelectRandomPlayer(float range = 0.0f, bool checkLoS = true)
        {
            Map* map = me->GetMap();
            if (!map->IsDungeon())
                return NULL;

            Map::PlayerList const &PlayerList = map->GetPlayers();
            if (PlayerList.isEmpty())
                return NULL;

            std::list<Player*> temp;
            for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
                if ((me->IsWithinLOSInMap(i->getSource()) || !checkLoS) && me->getVictim() != i->getSource() &&
                    me->IsWithinDistInMap(i->getSource(), range) && i->getSource()->isAlive())
                    temp.push_back(i->getSource());

            if (!temp.empty())
            {
                std::list<Player*>::const_iterator j = temp.begin();
                advance(j, rand()%temp.size());
                return (*j);
            }
            return NULL;
        }

        void SpellHitTarget(Unit* unit, const SpellInfo* spell)
        {
            if (spell->Id == SPELL_CONFLAGRATION && unit->HasAura(SPELL_CONFLAGRATION))
                SaySound(SAY_CONFLAGRATION, unit);
        }

		void SetData(uint32 phase, uint32)
		{
			switch (phase)
			{
				case 1:
					events.Reset();
					Phase = 2;
					break;
				case 2:
				case 3:
					events.Reset();
					Phase = 3;
					break;
				case 4:
					Phase = 4;
					break;
			}
		}

        void JustDied(Unit* /*killer*/)
        {
            me->StopMoving();
            SaySound(SAY_DEATH);
            if (Creature* wisp = DoSpawnCreature(WISP_INVIS, 0, 0, 0, 0, TEMPSUMMON_TIMED_DESPAWN, 60000))
                CAST_AI(mob_wisp_invis::mob_wisp_invisAI, wisp->AI())->SetType(4);
            if (instance)
                instance->SetData(DATA_HORSEMAN_EVENT, DONE);
			Map* map = me->GetMap();
            if (map && map->IsDungeon())
            {
                Map::PlayerList const& players = map->GetPlayers();
                if (!players.isEmpty())
                    for (Map::PlayerList::const_iterator i = players.begin(); i != players.end(); ++i)
                        if (Player* player = i->getSource())
                            if (player->GetDistance(me) < 100.0f)
                                sLFGMgr->RewardDungeonDoneFor(285, player);
            }
        }

        void SpellHit(Unit* caster, const SpellInfo* spell)
        {
            if (withhead)
                return;

            if (spell->Id == SPELL_FLYING_HEAD)
            {
				switch (Phase)
				{
					case 2:
						events.ScheduleEvent(EVENT_HORSEMAN_CLEAVE, 3000);
						events.ScheduleEvent(EVENT_HORSEMAN_LAUGH, urand(11000, 22000));
						events.ScheduleEvent(EVENT_HORSEMAN_CONFLAGRATE, urand(10000, 16000));
						break;
					case 3:
						events.ScheduleEvent(EVENT_HORSEMAN_CLEAVE, 3000);
						events.ScheduleEvent(EVENT_HORSEMAN_LAUGH, urand(11000, 22000));
						events.ScheduleEvent(EVENT_HORSEMAN_PUMPKINS, urand(25000, 35000));
						break;
					case 4:
						me->CastSpell(me, SPELL_HEAD_IS_DEAD);
						me->Kill(me);
						return;
				}
                withhead = true;
				headGUID = 0;
                me->RemoveAllAuras();
                me->SetName("Headless Horseman");
                me->SetFullHealth();
                SaySound(SAY_REJOINED);
                DoCast(me, SPELL_HEAD);
            }
        }

        void DamageTaken(Unit* /*done_by*/, uint32 &damage)
        {
            if (damage >= me->GetHealth())
            {
                damage = 0;
				if (withhead)
				{
					withhead = false;
					me->RemoveAllAuras();
					me->SetName("Headless Horseman, Unhorsed");

					headGUID = DoSpawnCreature(HEAD, float(rand()%10), float(rand()%10), 0, 0, TEMPSUMMON_DEAD_DESPAWN, 0)->GetGUID();

					Unit* Head = Unit::GetUnit(*me, headGUID);
					if (Head && Head->isAlive())
					{
						Head->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
						me->InterruptNonMeleeSpells(false);
						DoCast(me, SPELL_IMMUNE, true);
						DoCast(me, SPELL_BODY_REGEN, true);
						Head->GetAI()->SetData(Phase, 0);
						DoCast(Head, SPELL_FLYING_HEAD, true);
						DoCast(me, SPELL_CONFUSE, false);
						Head->SetVisible(false);
						events.Reset();
						events.ScheduleEvent(EVENT_HORSEMAN_TEST_HEAD, 1000);
						events.ScheduleEvent(EVENT_HORSEMAN_WHIRLWIND, 2000);
					}
				}
            }
        }

        void UpdateAI(const uint32 diff)
        {
			events.Update(diff);

			switch (events.ExecuteEvent())
			{
				case EVENT_PREFIGHT_TALK:
					if (Player* player = SelectRandomPlayer(100.0f, false))
					{
						player->Say(Text[count++], 0);
						if (count >= 4)
						{
							DoCast(me, SPELL_RHYME_BIG);
							events.ScheduleEvent(EVENT_START_FLIGHT, 2000);
							return;
						}
					}
					events.ScheduleEvent(EVENT_PREFIGHT_TALK, 3000);
					break;
				case EVENT_START_FLIGHT:
					me->SetVisible(true);
					me->GetMotionMaster()->MoveSmoothPath(1, FlightPoint, 20, 15.0f, true);
					if (Creature* smoke = me->SummonCreature(WISP_INVIS, Spawn[2].x, Spawn[2].y, Spawn[2].z, 0, TEMPSUMMON_TIMED_DESPAWN, 20000))
						CAST_AI(mob_wisp_invis::mob_wisp_invisAI, smoke->AI())->SetType(3);
					if (Creature* flame = me->SummonCreature(WISP_INVIS, Spawn[1].x, Spawn[1].y, Spawn[1].z, 0, TEMPSUMMON_TIMED_DESPAWN, 17000))
						CAST_AI(mob_wisp_invis::mob_wisp_invisAI, flame->AI())->SetType(2);
					break;
				case EVENT_HORSEMAN_CLEAVE:
					DoMeleeAttackIfReady();
					DoCastVictim(SPELL_CLEAVE);
					events.ScheduleEvent(EVENT_HORSEMAN_CLEAVE, urand(2000, 6000));
					break;
				case EVENT_HORSEMAN_LAUGH:
					me->MonsterTextEmote(EMOTE_LAUGHS, 0);
					DoPlaySoundToSet(me, RandomLaugh[urand(0, 2)]);
					events.ScheduleEvent(EVENT_HORSEMAN_LAUGH, urand(11000, 22000));
					break;
				case EVENT_HORSEMAN_CONFLAGRATE:
					if (Unit* player = SelectTarget(SELECT_TARGET_RANDOM, 0, 30.0f))
						DoCast(player, SPELL_CONFLAGRATION);
					events.ScheduleEvent(EVENT_HORSEMAN_CONFLAGRATE, urand(10000, 16000));
					break;
				case EVENT_HORSEMAN_PUMPKINS:
					me->InterruptNonMeleeSpells(false);
					DoCast(me, SPELL_SUMMON_PUMPKIN);
					SaySound(SAY_SPROUTING_PUMPKINS);
					events.ScheduleEvent(EVENT_HORSEMAN_PUMPKINS, urand(25000, 35000));
					break;
				case EVENT_HORSEMAN_TEST_HEAD:
					if (me->IsFullHealth())
					{
						Creature* Head = Unit::GetCreature((*me), headGUID);
						if (Head && Head->isAlive())
							CAST_AI(mob_head::mob_headAI, Head->AI())->Disappear();
						return;
					}
					events.ScheduleEvent(EVENT_HORSEMAN_TEST_HEAD, 1000);
					break;
				case EVENT_HORSEMAN_WHIRLWIND:
					if (urand(0, 1))
					{
						me->RemoveAurasDueToSpell(SPELL_CONFUSE);
						DoCast(me, SPELL_WHIRLWIND, true);
						DoCast(me, SPELL_CONFUSE);
					}
					else
						me->RemoveAurasDueToSpell(SPELL_WHIRLWIND);
					events.ScheduleEvent(EVENT_HORSEMAN_WHIRLWIND, urand(4000, 8000));
					break;
			}

			if (UpdateVictim())
				DoMeleeAttackIfReady();
        }
    };
};

class mob_pulsing_pumpkin : public CreatureScript
{
public:
    mob_pulsing_pumpkin() : CreatureScript("mob_pulsing_pumpkin") { }

    CreatureAI* GetAI(Creature* creature) const
    {
        return new mob_pulsing_pumpkinAI (creature);
    }

    struct mob_pulsing_pumpkinAI : public ScriptedAI
    {
        mob_pulsing_pumpkinAI(Creature* creature) : ScriptedAI(creature) {}

        bool sprouted;
        uint64 debuffGUID;

        void Reset()
        {
            float x, y, z;
            me->GetPosition(x, y, z);   //this visual aura some under ground
            me->SetPosition(x, y, z + 0.35f, 0.0f);
            Despawn();
			Creature* debuff = DoSpawnCreature(WISP_INVIS, 0, 0, 0, 0, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, 14500);
            if (debuff)
            {
                debuff->SetDisplayId(me->GetDisplayId());
                debuff->CastSpell(debuff, SPELL_PUMPKIN_AURA_GREEN, false);
                CAST_AI(mob_wisp_invis::mob_wisp_invisAI, debuff->AI())->SetType(1);
                debuffGUID = debuff->GetGUID();
            }
            sprouted = false;
            DoCast(me, SPELL_PUMPKIN_AURA, true);
            DoCast(me, SPELL_SPROUTING);
            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_STUNNED);
        }

        void SpellHit(Unit* /*caster*/, const SpellInfo* spell)
        {
            if (spell->Id == SPELL_SPROUTING)
            {
                sprouted = true;
                me->RemoveAllAuras();
                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_STUNNED);
                DoCast(me, SPELL_SPROUT_BODY, true);
                me->UpdateEntry(PUMPKIN_FIEND);
				DoZoneInCombat();
                DoStartMovement(me->getVictim());
            }
        }

        void Despawn()
        {
            if (!debuffGUID)
                return;

            Unit* debuff = Unit::GetUnit(*me, debuffGUID);
            if (debuff)
            {
                debuff->SetVisible(false);
                debuffGUID = 0;
            }
        }

        void JustDied(Unit* /*killer*/)
        {
            if (!sprouted)
                Despawn();
        }

        void MoveInLineOfSight(Unit* who)
        {
            if (!who || !me->IsValidAttackTarget(who) || me->getVictim())
                return;

            me->AddThreat(who, 0.0f);
            if (sprouted)
                DoStartMovement(who);
        }

        void UpdateAI(const uint32 /*diff*/)
        {
            if (sprouted && UpdateVictim())
                DoMeleeAttackIfReady();
        }
    };
};

class go_loosely_turned_soil : public GameObjectScript
{
public:
    go_loosely_turned_soil() : GameObjectScript("go_loosely_turned_soil") { }

    bool OnGossipHello(Player* player, GameObject* soil)
    {
        InstanceScript* instance = player->GetInstanceScript();
        if (instance)
        {
            if (instance->GetData(DATA_HORSEMAN_EVENT) == NOT_STARTED)
			{
				instance->SetData(DATA_HORSEMAN_EVENT, IN_PROGRESS);
				player->AreaExploredOrEventHappens(11405);
				if (Creature* horseman = soil->SummonCreature(HH_MOUNTED, Spawn[0].x, Spawn[0].y, Spawn[0].z, 0.0f))
					CAST_AI(boss_headless_horseman::boss_headless_horsemanAI, horseman->AI())->FlyMode();
			}
			else if (instance->GetData(DATA_HORSEMAN_EVENT) == DONE)
			{
				player->PrepareQuestMenu(soil->GetGUID());
				player->SendPreparedQuest(soil->GetGUID());
			}
        }
        return true;
    }
};

void AddSC_boss_headless_horseman()
{
    new boss_headless_horseman();
    new mob_head();
    new mob_pulsing_pumpkin();
    new mob_wisp_invis();
    new go_loosely_turned_soil();
}
